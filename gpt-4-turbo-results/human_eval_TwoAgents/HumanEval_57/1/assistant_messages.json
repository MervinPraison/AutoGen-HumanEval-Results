{
    "user_proxy": [
        {
            "content": "\nThe following python code imports the `run_tests(candidate)` function from my_tests.py, and runs\nit on the function `monotonic`. This will run a set of automated unit tests to verify the\ncorrect implementation of `monotonic`. However, `monotonic` is only partially\nimplemented in the code below. Complete the implementation of `monotonic` and output\na new stand-alone code block that contains everything needed to run the tests, including: importing\n`my_tests`, calling `run_tests(monotonic)`, as well as monotonic's complete definition,\nsuch that this code block can be run directly in Python.\n\n```python\nfrom my_tests import run_tests\n\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n\n\n# Run the unit tests\nrun_tests(monotonic)\n```\n",
            "role": "user"
        },
        {
            "content": "```python\n# filename: complete_monotonic.py\nfrom my_tests import run_tests\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True  # A list with 0 or 1 element is trivially monotonic\n    \n    # Determine if the sequence is increasing or decreasing based on the first two elements\n    is_increasing = None\n    for i in range(1, len(l)):\n        if l[i] != l[i-1]:  # Find the first non-equal consecutive elements to determine direction\n            is_increasing = (l[i] > l[i-1])\n            break\n    \n    if is_increasing is None:  # If all elements are the same, the list is monotonic\n        return True\n\n    if is_increasing:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:  # If the list decreases at any point, it's not monotonic\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:  # If the list increases at any point, it's not monotonic\n                return False\n    \n    return True\n\n# Run the unit tests\nrun_tests(monotonic)\n```",
            "role": "assistant"
        },
        {
            "content": "exitcode: 0 (execution succeeded)\nCode output: \nALL TESTS PASSED !#!#\nTERMINATE\n",
            "role": "user"
        }
    ]
}